<?php

namespace Bitfumes\Blogg\Models;

use Illuminate\Database\Eloquent\Model;
use Spatie\MediaLibrary\HasMedia\HasMedia;
use Spatie\MediaLibrary\HasMedia\HasMediaTrait;
use Spatie\MediaLibrary\Models\Media;
use Bitfumes\Likker\Contracts\Likeable;
use Bitfumes\Likker\Traits\CanBeLiked;

class Blog extends Model implements HasMedia, Likeable
{
    use HasMediaTrait, CanBeLiked;

    public function registerMediaConversions(Media $media = null)
    {
        $this->addMediaConversion('thumb')
            ->width(config('blogg.thumb.width'))
            ->height(config('blogg.thumb.height'))
            ->sharpen(config('blogg.thumb.sharpen'));
    }

    protected $fillable = ['title', 'slug', 'body', 'published', 'user_id', 'category_id'];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::creating(function ($blog) {
            self::setSlug($blog);
        });
        self::updating(function ($blog) {
            self::setSlug($blog);
        });
    }

    public static function store($request)
    {
        $blog = Self::create($request->except('image', 'tag_ids'));
        $blog->tags()->sync(request('tag_ids'));
        (new self)->saveImage($blog, request('image'));
        return $blog;
    }

    public function updateAll($data)
    {
        $this->update($data);
        $this->tags()->sync(request('tag_ids'));
        $this->saveImage($this, request('image'));
    }

    protected function saveImage($blog, $image)
    {
        $oldImage = $blog->getMedia('feature')->count() > 0 ? $blog->getMedia('feature')[0]->getUrl() : null;
        if ($image && ($oldImage != $image)) {
            $blog->clearMediaCollection('feature')
                ->addMediaFromBase64($image)
                ->toMediaCollection('feature');
        }
    }

    /**
     * @param $blog
     */
    public static function setSlug($blog)
    {
        $blog->slug = str_slug($blog->title);
    }

    /**
     * @param $query
     * @return mixed
     */
    public function scopePublished($query)
    {
        return $query->where('published', true)->latest();
    }

    /**
     * @return string
     */
    public function getRouteKeyName()
    {
        return 'slug';
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function category()
    {
        return $this->belongsTo(config('blogg.models.category'));
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\MorphToMany
     */
    public function tags()
    {
        return $this->morphToMany(config('blogg.models.tag'), 'taggable');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function user()
    {
        return $this->belongsTo(config('blogg.models.user'));
    }

    /**
     * @return string
     */
    public function path()
    {
        return asset("api/blog/{$this->category->slug}/{$this->slug}");
    }

    public function getImagePathAttribute()
    {
        return $this->hasMedia('feature') ? $this->getMedia('feature')[0]->getUrl() : null;
    }

    public function getThumbPathAttribute()
    {
        return $this->hasMedia('feature') ? $this->getMedia('feature')[0]->getUrl('thumb') : 'https://vuetifyjs.com/apple-touch-icon-180x180.png';
    }
}
